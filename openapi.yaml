# ===================== openapi.yaml =====================
cat > openapi.yaml <<'YAML'
openapi: 3.1.1
info:
  title: Mbarakajara – Conectores de Conservación
  version: 1.4.0
  description: >-
    Acceso a datos de biodiversidad (GBIF), geoespaciales (Earth Engine, Overpass),
    clima (Open-Meteo), y contexto (FAOSTAT, World Bank), para diseñar y gestionar
    el modelo de la Fundación Mbarakajara.

servers:
  - url: https://api.gbif.org/v1
    description: GBIF
  - url: https://earthengine.googleapis.com
    description: Google Earth Engine
  - url: https://overpass-api.de
    description: Overpass API
  - url: https://climate-api.open-meteo.com
    description: Open‑Meteo Climate API
  - url: https://fenixservices.fao.org
    description: FAOSTAT
  - url: https://api.worldbank.org
    description: World Bank API
  - url: https://www.geoboundaries.org
    description: geoBoundaries

paths:
  /species/search:
    get:
      operationId: gbifSearchSpecies
      tags: [GBIF]
      summary: Buscar especies por nombre (científico o común)
      parameters:
        - name: q
          in: query
          required: true
          schema: { type: string }
          description: "Texto de búsqueda (ej. 'Panthera onca')"
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: Resultados de especies

  /species/match:
    get:
      operationId: gbifMatchSpecies
      tags: [GBIF]
      summary: Normalizar nombre científico (name matching)
      parameters:
        - name: name
          in: query
          required: true
          schema: { type: string }
          description: Nombre científico a normalizar
      responses:
        '200':
          description: Resultado del name matching

  /species/{key}:
    get:
      operationId: gbifGetSpeciesByKey
      tags: [GBIF]
      summary: Detalle de especie por clave GBIF
      parameters:
        - name: key
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Ficha de la especie

  /occurrence/search:
    get:
      operationId: gbifSearchOccurrences
      tags: [GBIF]
      summary: Buscar registros de ocurrencia (avistamientos)
      parameters:
        - name: scientificName
          in: query
          schema: { type: string }
        - name: country
          in: query
          schema: { type: string }
          description: "ISO-2 (ej. 'PY')"
        - name: geometry
          in: query
          schema: { type: string }
          description: WKT o POLYGON((...))
        - name: hasCoordinate
          in: query
          schema: { type: boolean, default: true }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: Lista de ocurrencias

  /v1/projects/{project}/assets-list:
    get:
      operationId: geeListProjectAssets
      tags: [Earth Engine]
      summary: Listar assets del proyecto (carpetas, tablas, imágenes)
      security:
        - googleOAuth:
          - https://www.googleapis.com/auth/earthengine
      parameters:
        - name: project
          in: path
          required: true
          schema: { type: string }
        - name: pageSize
          in: query
          schema: { type: integer, default: 50 }
        - name: pageToken
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Listado de assets

  /v1/projects/{project}/images-computeTiles:
    post:
      operationId: geeComputeImageTiles
      tags: [Earth Engine]
      summary: Calcular tiles/URL de visualización de una imagen (RGB/estilo)
      security:
        - googleOAuth:
          - https://www.googleapis.com/auth/earthengine
      parameters:
        - name: project
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [expression]
              properties:
                expression:
                  type: string
                  description: Expresión de imagen o ID de asset
                grid:
                  type: object
                  description: Parámetros de grilla/zoom
                visParams:
                  type: object
                  description: Estilos (bands, min, max, gamma)
      responses:
        '200':
          description: Información de tiles (mapId, tileUrlTemplate)

  /api/interpreter:
    post:
      operationId: osmRunOverpass
      tags: [OpenStreetMap]
      summary: Ejecutar consultas Overpass QL (rutas, ríos, áreas protegidas etiquetadas, etc.)
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: Consulta Overpass QL
      responses:
        '200':
          description: Resultado GeoJSON/JSON
      externalDocs:
        url: https://wiki.openstreetmap.org/wiki/Overpass_API

  /v1/climate:
    get:
      operationId: omGetClimateNormals
      tags: [Open-Meteo]
      summary: Climatología (normales) para apoyo a restauración/ecología
      parameters:
        - name: latitude
          in: query
          required: true
          schema: { type: number }
        - name: longitude
          in: query
          required: true
          schema: { type: number }
        - name: start_year
          in: query
          required: true
          schema: { type: integer }
        - name: end_year
          in: query
          required: true
          schema: { type: integer }
        - name: models
          in: query
          schema: { type: string }
          description: "Ej. 'ERA5' o múltiples separados por coma"
      responses:
        '200':
          description: Serie climática agregada

  /faostat/api/v1/{lang}/{domain}/{item}:
    get:
      operationId: faostatGetItem
      tags: [FAOSTAT]
      summary: Indicadores FAOSTAT (bosques, agricultura, uso de suelo)
      parameters:
        - name: lang
          in: path
          required: true
          schema: { type: string }
          description: en | es | fr
        - name: domain
          in: path
          required: true
          schema: { type: string }
          description: Ej. Forestry
        - name: item
          in: path
          required: true
          schema: { type: string }
          description: Ej. FO
        - name: area_code
          in: query
          schema: { type: string }
          description: Código de país (ej. 167 para Paraguay)
        - name: item_code
          in: query
          schema: { type: string }
        - name: year
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Datos FAOSTAT

  /v2/country/{country}/indicator/{indicator}:
    get:
      operationId: wbGetIndicator
      tags: [World Bank]
      summary: Indicadores de contexto (población rural, áreas protegidas, etc.)
      parameters:
        - name: country
          in: path
          required: true
          schema: { type: string }
          description: ISO-2 o ISO-3 (ej. PRY)
        - name: indicator
          in: path
          required: true
          schema: { type: string }
          description: Código del indicador WB
        - name: format
          in: query
          schema: { type: string, default: json }
        - name: date
          in: query
          schema: { type: string }
          description: Rango de años, ej. 2000:2025
      responses:
        '200':
          description: Serie del indicador solicitado

  /api/current/gbOpen/{ISO}/{ADM}:
    get:
      operationId: gbGetBoundaries
      tags: [geoBoundaries]
      summary: Descargar límites administrativos (ej. Paraguay ADM0/ADM1/ADM2)
      parameters:
        - name: ISO
          in: path
          required: true
          schema: { type: string }
          description: Código ISO-3 del país (PRY)
        - name: ADM
          in: path
          required: true
          schema: { type: string }
          description: Nivel administrativo (ADM0/ADM1/ADM2)
      responses:
        '200':
          description: Metadatos/descarga de límites administrativos

components:
  securitySchemes:
    googleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            https://www.googleapis.com/auth/earthengine: Acceso a recursos de Google Earth Engine
  schemas: {}

tags:
  - name: GBIF
    description: Biodiversidad: especies y ocurrencias
  - name: Earth Engine
    description: Imágenes satelitales y análisis geoespacial (requiere OAuth2)
  - name: OpenStreetMap
    description: Infraestructura y features via Overpass API
  - name: Open-Meteo
    description: Clima histórico y climatología
  - name: FAOSTAT
    description: Indicadores FAO de bosques/agricultura
  - name: World Bank
    description: Indicadores de contexto socioeconómico
  - name: geoBoundaries
    description: Límites administrativos para análisis territorial

x-prompts:
  playbooks:
    - name: Diagnóstico rápido de bioma
      prompt: >-
        Haz un diagnóstico 80/20 para {bioma} en Paraguay (amenazas, vacíos de conservación, actores clave).
        Devuelve: tabla de amenazas con severidad (1–5), mapa de áreas prioritarias (si hay), 3 acciones inmediatas.
    - name: Ficha de especie prioritaria
      prompt: >-
        Con GBIF, arma una ficha para {nombre científico/común} en Paraguay: taxonomía, ocurrencias recientes (5 años),
        hotspots (top 5), estado de conservación, principales amenazas y 3 medidas de manejo.
    - name: Screening de áreas de restauración
      prompt: >-
        Usa geoBoundaries (ADM1/ADM2) y Overpass para localizar áreas degradadas cercanas a cursos de agua en {departamento}.
        Devuelve lista de polígonos candidatos con justificación, y solicita tiles GEE si procede.
    - name: Clima para restauración
      prompt: >-
        Con Open-Meteo, extrae normales climáticas 1991–2020 para lat/lon {-xx.x,-yy.y}. Resume temperatura/precipitación,
        estacionalidad y recomendaciones de especies nativas tolerantes.
    - name: Plan de manejo de reserva (MVP)
      prompt: >-
        Genera un plan de manejo adaptativo para la Reserva {nombre}: objetivos, zonificación, protocolo de monitoreo,
        indicadores (biodiversidad, presión antrópica, gobernanza) y cronograma T1–T4.
    - name: Incidencia normativa
      prompt: >-
        Mapea leyes y reglamentos paraguayos sobre áreas protegidas y bosques. Devuelve matriz: norma, artículo,
        requisito operativo, entidad competente y oportunidades de incidencia.
    - name: Alianzas estratégicas
      prompt: >-
        Propón 10 alianzas (ONGs, universidades, comunidades, empresas B) alineadas a {línea de acción}. Incluye objetivo de alianza,
        aporte esperado y próximos pasos.
    - name: Portafolio de proyectos (donantes)
      prompt: >-
        Diseña 3 proyectos ‘listos para fondeo’ (12–24 meses) con teoría de cambio, presupuesto estimado, KPIs,
        y donantes/convocatorias sugeridas.
    - name: Monitoreo de especies emblemáticas
      prompt: >-
        Define protocolo para {jaguareté/tapir/oso hormiguero/guacamayo azul}: indicadores, diseño muestral, frecuencia, equipo,
        bioseguridad y tablero mínimo de datos.
    - name: Informe ejecutivo mensual
      prompt: >-
        Compila un informe mensual para el Consejo: hitos, riesgos, métricas clave, uso de fondos, y decisiones requeridas.
        Máx. 2 páginas + 1 tabla de KPIs.

x-schemas:
  general_response:
    summary: string
    data_tables:
      - name: string
        columns: [col1, col2]
        rows:
          - ['...']
    maps:
      - title: string
        source: GEE/OSM
        tile_url: string or null
        notes: string
    kpis:
      - name: string
        value: number|string
        unit: string
        target: number|string
    next_actions:
      - owner: role/persona
        action: string
        due: YYYY-MM-DD
    sources: [string]

  species_brief:
    species:
      scientific_name: string
      common_name: string
      status: IUCN/Local
    occurrences:
      count: 0
      window_years: 5
      hotspots:
        - adm: string
          n: 0
    threats:
      - threat: string
        severity: 1
    management:
      - measure: string
        priority: alta|media|baja

  restoration_screening:
    candidates:
      - adm: ADM1/ADM2
        geom_ref: WKT/OSM id
        justification: string
        constraints: [string]
        gee_tile: string|null
    recommendation: string

x-operational_instructions:
  return_json_always: true
  error_policy: >-
    Reintentar 1 vez; si persiste, continuar con análisis cualitativo y marcar tile_url:null.
  gbif_defaults:
    country: PY
    hasCoordinate: true
    window_years: [5, 10]
  overpass_policy: Usar bounding boxes por ADM2; evitar consultas globales; backoff si 429.
  gee_policy: Si no hay OAuth, sugerir dataset público equivalente (Hansen/GlobalForestChange).
  presentation: Usar tablas para amenazas, KPIs y cronogramas; máximo 8 KPIs por proyecto.
YAML

# ===================== README.md =====================
cat > README.md <<'MD'
# Mbarakajara – Conectores de Conservación (OpenAPI)

Especificación **OpenAPI 3.1.1** para integrar: biodiversidad (GBIF), geoespacial (Google Earth Engine, Overpass/OSM),
clima (Open‑Meteo) y contexto (FAOSTAT, World Bank).

## Documentación

- **Swagger UI** (GitHub Pages): se publica automáticamente con GitHub Actions.
- **Redoc**: `https://<usuario>.github.io/<repo>/redoc.html`

## Rutas normalizadas (sin `:`)

| Antes | Ahora |
|---|---|
| `/v1/projects/{project}/assets:list` | `/v1/projects/{project}/assets-list` |
| `/v1/projects/{project}/images:computeTiles` | `/v1/projects/{project}/images-computeTiles` |

## Validación local (opcional)

```bash
npm i -D @redocly/cli @stoplight/spectral-cli
npx redocly lint openapi.yaml
npx spectral lint openapi.yaml
```

## Desarrollo local (docs)

```bash
npx serve docs
# o
python -m http.server -d docs 8080
```

## Contribuir

- PRs contra `main`.
- `validate-openapi.yml` valida en cada push/PR.
- Al mergear en `main`, `pages.yml` publica en GitHub Pages.

## Licencia

Elige una licencia (por ejemplo **MIT**) y crea `LICENSE` si será público.
MD

# ===================== docs/index.html =====================
cat > docs/index.html <<'HTML'
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Mbarakajara API – Swagger UI</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist/swagger-ui.css" />
    <style> body { margin: 0; } #swagger-ui { max-width: 1200px; margin: 0 auto; } </style>
  </head>
  <body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist/swagger-ui-bundle.js"></script>
    <script>
      window.onload = () => {
        window.ui = SwaggerUIBundle({
          url: '../openapi.yaml',
          dom_id: '#swagger-ui',
          deepLinking: true,
          presets: [SwaggerUIBundle.presets.apis],
        });
      };
    </script>
  </body>
</html>
HTML

# ===================== docs/redoc.html =====================
cat > docs/redoc.html <<'HTML'
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Mbarakajara API – Redoc</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"></script>
    <style> body { margin: 0; } </style>
  </head>
  <body>
    <redoc spec-url="../openapi.yaml"></redoc>
  </body>
</html>
HTML

# ===================== .github/workflows/validate-openapi.yml =====================
cat > .github/workflows/validate-openapi.yml <<'YML'
name: Validate OpenAPI

on:
  push:
    paths:
      - 'openapi.yaml'
      - '.github/workflows/validate-openapi.yml'
  pull_request:
    paths:
      - 'openapi.yaml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install linters
        run: npm i -D @redocly/cli @stoplight/spectral-cli
      - name: Redocly lint
        run: npx redocly lint openapi.yaml
      - name: Spectral lint
        run: npx spectral lint openapi.yaml
YML

# ===================== .github/workflows/pages.yml =====================
cat > .github/workflows/pages.yml <<'YML'
name: Deploy Docs to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'openapi.yaml'
      - 'docs/**'
      - '.github/workflows/pages.yml'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
YML

# (Opcional) inicializa repo git y primer commit
if command -v git >/dev/null 2>&1; then
  git init
  git add .
  git commit -m "OpenAPI 3.1.1 + docs + CI"
  echo "\nProyecto creado en: $(pwd)"
  echo "\nSiguiente paso (opcional con GitHub CLI):"
  echo "gh repo create ${REPO} --public --source=. --remote=origin --push"
fi

printf "\nListo ✅  Carpeta '%s' creada con todos los archivos.\n" "$REPO"
